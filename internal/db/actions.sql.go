// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: actions.sql

package db

import (
	"context"
)

const createAction = `-- name: CreateAction :one
INSERT INTO actions (id, title, start_at, finish_at)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, title, description, status, created_at, updated_at, start_at, finish_at
`

type CreateActionParams struct {
	ID       string
	Title    string
	StartAt  string
	FinishAt string
}

func (q *Queries) CreateAction(ctx context.Context, arg CreateActionParams) (Action, error) {
	row := q.db.QueryRowContext(ctx, createAction,
		arg.ID,
		arg.Title,
		arg.StartAt,
		arg.FinishAt,
	)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartAt,
		&i.FinishAt,
	)
	return i, err
}

const deleteAction = `-- name: DeleteAction :exec

DELETE FROM actions WHERE id = ?1
`

// update
// delete
func (q *Queries) DeleteAction(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAction, id)
	return err
}

const readActions = `-- name: ReadActions :many
SELECT id, title, description, status, created_at, updated_at, start_at, finish_at FROM actions
`

func (q *Queries) ReadActions(ctx context.Context) ([]Action, error) {
	rows, err := q.db.QueryContext(ctx, readActions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartAt,
			&i.FinishAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
